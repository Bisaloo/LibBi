[%-
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
-%]
[%-MACRO sig_action_static_function(function) BLOCK %]
  [% IF function == 'simulate' %]
  template <bi::Location L, class CX, class PX, class OX>
  void [% class_name %]::simulates(bi::State<[% model_class_name %],L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  [% ELSIF function == 'sample' %]
  template <class R1, bi::Location L, class CX, class PX, class OX>
  void [% class_name %]::samples(R1& rng, bi::State<[% model_class_name %],L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  [% ELSIF function == 'logdensity' %]
  template <bi::Location L, class CX, class PX, class OX, class T1>
  void [% class_name %]::logDensities(bi::State<[% model_class_name %],L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  [% ELSIF function == 'maxlogdensity' %]
  template <bi::Location L, class CX, class PX, class OX, class T1>
  void [% class_name %]::maxLogDensities(bi::State<[% model_class_name %],L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  [% ELSE %]
  template <bi::Location L, class CX, class PX, class T1>
  void [% class_name %]::[% function %](bi::State<[% model_class_name %],L>& s, const int p, const CX& cox, const PX& pax, T1& x)
  [% END %]
[% END-%]
[%-MACRO sig_action_dynamic_function(function) BLOCK %]
  [% IF function == 'simulate' %]
  template <class T1, bi::Location L, class CX, class PX, class OX>
  void [% class_name %]::simulates(const T1 t1, const T1 t2, bi::State<[% model_class_name %],L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  [% ELSIF function == 'sample' %]
  template <class R1, class T1, bi::Location L, class CX, class PX, class OX>
  void [% class_name %]::samples(R1& rng, const T1 t1, const T1 t2, bi::State<[% model_class_name %],L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x)
  [% ELSIF function == 'logdensity' %]
  template <class T1, bi::Location L, class CX, class PX, class OX, class T1>
  void [% class_name %]::logDensities(const T1 t1, const T1 t2, bi::State<[% model_class_name %],L>& s, const int p, const int ix, const CX& cox, const PX& pax, OX& x, T1& lp)
  [% ELSE %]
  template <class T1, bi::Location L, class CX, class PX, class T2>
  void [% class_name %]::[% function %](const T1 t1, const T1 t2, bi::State<[% model_class_name %],L>& s, const int p, const CX& cox, const PX& pax, T2& x)
  [% END %]
[% END-%]
