[%-
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
-%]
[%-MACRO sig_block_static_function(function) BLOCK %]
  [% IF function == 'sample' %]
  template<bi::Location L>
  void [% class_name %]::samples(bi::Random& rng, bi::State<[% model_class_name %],L>& s)
  [% ELSIF function == 'simulate' %]
  template<bi::Location L>
  void [% class_name %]::simulates(bi::State<[% model_class_name %],L>& s)
  [% ELSIF function == 'logdensity' %]
  template<bi::Location L, class V1>
  void [% class_name %]::logDensities(bi::State<[% model_class_name %],L>& s, V1 lp)
  [% ELSIF function == 'maxlogdensity' %]
  template<bi::Location L, class V1>
  void [% class_name %]::maxLogDensities(bi::State<[% model_class_name %],L>& s, V1 lp)
  [% ELSE %]
  [% THROW 'unknown function type' %]
  [% END %]
[% END-%]
[%-MACRO sig_block_dynamic_function(function) BLOCK %]
  [% IF function == 'sample' %]
  template<class T1, bi::Location L>
  void [% class_name %]::samples(bi::Random& rng, const T1 t1, const T1 t2, const bool onDelta, bi::State<[% model_class_name %],L>& s)
  [% ELSIF function == 'simulate' %]
  template<class T1, bi::Location L>
  void [% class_name %]::simulates(const T1 t1, const T1 t2, const bool onDelta, bi::State<[% model_class_name %],L>& s)
  [% ELSIF function == 'logdensity' %]
  template<class T1, bi::Location L, class V1>
  void [% class_name %]::logDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<[% model_class_name %],L>& s, V1 lp)
  [% ELSIF function == 'maxlogdensity' %]
  template<class T1, bi::Location L, class V1>
  void [% class_name %]::maxLogDensities(const T1 t1, const T1 t2, const bool onDelta, bi::State<[% model_class_name %],L>& s, V1 lp)
  [% ELSE %]
  [% THROW 'unknown function type' %]
  [% END %]
[% END-%]
[%-MACRO sig_block_sparse_static_function(function) BLOCK %]
  [% IF function == 'sample' %]
  template<bi::Location L>
  void [% class_name %]::samples(bi::Random& rng, bi::State<[% model_class_name %],L>& s, const bi::Mask<L>& mask)
  [% ELSIF function == 'simulate' %]
  template<bi::Location L>
  void [% class_name %]::simulates(bi::State<[% model_class_name %],L>& s, const bi::Mask<L>& mask)
  [% ELSIF function == 'logdensity' %]
  template<bi::Location L, class V1>
  void [% class_name %]::logDensities(bi::State<[% model_class_name %],L>& s, const bi::Mask<L>& mask, V1 lp)
  [% ELSIF function == 'maxlogdensity' %]
  template<bi::Location L, class V1>
  void [% class_name %]::maxLogDensities(bi::State<[% model_class_name %],L>& s, const bi::Mask<L>& mask, V1 lp)
  [% ELSE %]
  [% THROW 'unknown function type' %]
  [% END %]
[% END-%]
