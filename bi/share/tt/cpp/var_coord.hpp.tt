[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[% PROCESS macro.hpp.tt %]

[%-class_name = 'VarCoord' _ var.get_id-%]
/**
 * @file
 *
 * @author Generated by LibBi
 * $Rev$
 * $Date$
 */
#ifndef LIBBI_[% class_name | upper %]_HPP
#define LIBBI_[% class_name | upper %]_HPP

/**
 * Coordinate: [% var.get_id %].
 */
class [% class_name %] {
public:
  /**
   * Default constructor.
   */
  CUDA_FUNC_BOTH [% class_name %]();
  
  [% IF var.get_dims.size > 0 %]
  /**
   * Constructor.
   */
  CUDA_FUNC_BOTH [% class_name %]([% FOREACH dim IN var.get_dims %]const int i[% loop.index %][% ", " UNLESS loop.last %][% END %]);
  [% END %]

  [% IF var.get_dims.size != 1 %]
  /**
   * Construct from serial index.
   *
   * @param ix Serial index.
   */
  CUDA_FUNC_BOTH [% class_name %](const int ix);
  [% END %]
  
  /**
   * Increment to next coordinate in serial ordering.
   */
  CUDA_FUNC_BOTH void inc();
   
  /**
   * Decrement to previous coordinate in serial ordering.
   */
  CUDA_FUNC_BOTH void dec();

  /**
   * Recover serial index.
   * 
   * @return Serial index for coordinate.
   */
  CUDA_FUNC_BOTH int index() const;
  
  /**
   * Set serial index.
   *
   * @param ix Serial index for coordinate.
   *
   * Sets the coordinate to be equivalent to the given serial index.
   */
  CUDA_FUNC_BOTH void setIndex(const int ix);

  /**
   * Prefix increment operator.
   */
  CUDA_FUNC_BOTH [% class_name %]& operator++() {
    inc();
    return *this;
  }
  
  /**
   * Postfix increment operator.
   */
  CUDA_FUNC_BOTH [% class_name %] operator++(int) {
    [% class_name %] tmp(*this);
    inc();
    return tmp;
  }
  
  /**
   * Prefix decrement operator.
   */
  CUDA_FUNC_BOTH [% class_name %]& operator--() {
    dec();
    return *this;
  }
  
  /**
   * Postfix decrement operator.
   */
  CUDA_FUNC_BOTH [% class_name %] operator--(int) {
    [% class_name %] tmp(*this);
    dec();
    return tmp;
  }

  [% FOREACH dim IN var.get_dims %]
  /**
   * Coordinate on dimension.
   */
  int i[% loop.index %];
  [% END %]
  
  [% FOREACH dim IN var.get_dims %]
  /**
   * Size of dimension.
   */
  static const int N[% loop.index %] = [% dim.get_size %];
  [% END %]
};

inline [% class_name %]::[% class_name %]() {
  [%-FOREACH dim IN var.get_dims %]
  this->i[% loop.index %] = 0;
  [%-END %]
}

[% IF var.get_dims.size > 0 %]
inline [% class_name %]::[% class_name %]([% FOREACH dim IN var.get_dims %]const int i[% loop.index %][% ", " UNLESS loop.last %][% END %]) {
  [%-FOREACH dim IN var.get_dims %]
  [% IF dim.get_named_arg('boundary').eval_const == 'cyclic' %]
  this->i[% loop.index %] = (i[% loop.index %] + N[% loop.index %]) % N[% loop.index %];
  [% ELSE %]
  this->i[% loop.index %] = i[% loop.index %];
  [% END %]
  [%-END %]
}
[% END %]

[% IF var.get_dims.size != 1 %]
inline [% class_name %]::[% class_name %](const int ix) {
  setIndex(ix);
}
[% END %]

inline void [% class_name %]::inc() {
  [% FOREACH dim IN var.get_dims %]
  if (i[% loop.index %] < N[% loop.index %] - 1) {
    ++i[% loop.index %];
  } else {
    i[% loop.index %] = 0;
  [% END %]
  [% FOREACH dim IN var.get_dims %]
  }
  [% END %]
}

inline void [% class_name %]::dec() {
  [% FOREACH dim IN var.get_dims %]
  if (i[% loop.index %] > 0) {
    --i[% loop.index %];
  } else {
    i[% loop.index %] = N[% loop.index %] - 1;
  [% END %]
  [% FOREACH dim IN var.get_dims %]
  }
  [% END %]
}

inline int [% class_name %]::index() const {
  [% IF var.get_dims.size == 0 %]
  return 0;
  [% ELSE %]
  [% FOREACH dim IN var.get_dims %]
  [% IF loop.first %]
  int ix = i[% loop.index %];
  [% IF !loop.last %]
  int len = N[% loop.index %];
  [% END %]
  [% ELSE %]
  ix += i[% loop.index %]*len;
  [% IF !loop.last %]
  len *= N[% loop.index %];
  [% END %]
  [% END %]
  [% END %]

  return ix;
  [% END %]
}

inline void [% class_name %]::setIndex(const int ix) {
  [%-IF var.get_dims.size > 0 %]
  int j = ix;
  [%-END-%]
  [%-IF var.get_dims.size > 1 %]
  int rest;
  [%-END-%]
  
  [%-FOREACH dim IN var.get_dims %]
  [%-IF loop.last-%]
  i[% loop.index %] = j;
  [%-ELSE-%]
  rest = j/N[% loop.index %];
  i[% loop.index %] = j - rest*N[% loop.index %];
  j = rest;
  [%-END-%]
  [%-END %]
}

#endif
