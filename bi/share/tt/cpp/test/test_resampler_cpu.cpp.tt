[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "bi/resampler/MultinomialResampler.hpp"
#include "bi/resampler/MetropolisResampler.hpp"
#include "bi/resampler/RejectionResampler.hpp"
#include "bi/resampler/KernelResampler.hpp"
#include "bi/resampler/StratifiedResampler.hpp"
#include "bi/random/Random.hpp"
#include "bi/pdf/GaussianPdf.hpp"
#include "bi/math/loc_vector.hpp"
#include "bi/math/loc_matrix.hpp"
#include "bi/misc/TicToc.hpp"

#include <iostream>
#include <string>
#include <unistd.h>
#include <getopt.h>

#include "netcdfcpp.h"

#ifndef ENABLE_CUDA
#define LOCATION ON_HOST
#else
#define LOCATION ON_DEVICE
#endif

int main(int argc, char* argv[]) {
  using namespace bi;

  /* command line arguments */
  [% read_argv(client) %]

  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  #endif
  
  /* NetCDF init */
  NcError ncErr(NcError::verbose_fatal);
  
  /* bi init */
  bi_init(THREADS);

  /* random number generator */
  Random rng(SEED);

  /* set up output file */
  NcFile* out = new NcFile(OUTPUT_FILE.c_str(), NcFile::Replace);
	
  NcDim* zDim = out->add_dim("z", ZS);
  NcDim* PDim = out->add_dim("P", PS);
  NcDim* repDim = out->add_dim("rep", REPS);
	  
  NcVar* sqerrVar = out->add_var("sqerr", ncDouble, zDim, PDim, repDim);
  NcVar* time1Var = out->add_var("time1", ncInt, zDim, PDim, repDim);
  NcVar* time2Var = out->add_var("time2", ncInt, zDim, PDim, repDim);
  NcVar* time3Var = out->add_var("time3", ncInt, zDim, PDim, repDim);
  NcVar* PVar = out->add_var("P", ncInt, PDim);
  NcVar* zVar = out->add_var("z", ncDouble, zDim);
  
  /* resampler */
  [% IF client.get_named_arg('resampler') == 'metropolis' %]
  MetropolisResampler resam(C);
  [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
  RejectionResampler resam;
  [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
  MultinomialResampler resam(ENABLE_SORT);
  [% ELSE %]
  StratifiedResampler resam(ENABLE_SORT);
  [% END %]

  /* buffers for weight-sets and results */
  typedef typename loc_vector<LOCATION,real,-1,1>::type vector_type;
  typedef typename loc_matrix<LOCATION,real>::type matrix_type;
  typedef typename loc_vector<LOCATION,int,-1,1>::type int_vector_type;
  typedef typename loc_matrix<LOCATION,int>::type int_matrix_type;
  
  /* generate particles (all on host so weight sets match on host and device) */
  int maxP = std::pow(2, PS + 4);
  int actualP = 0;
  
  host_matrix<real> x(maxP*REPS, 1);  // particles
  host_matrix<real> lW(maxP, REPS); // log-weights
  host_matrix<int> times1(REPS, PS), times2(REPS, PS), times3(REPS, PS);
  host_matrix<real> sqerrs(REPS, PS);
  host_vector<int> actualPs(PS);
  host_vector<int> zs(ZS);

  vector_type lw(maxP);
  int_vector_type a(maxP);
  int_vector_type o(maxP);
  
  GaussianPdf<> f(1), g(1);
  f.samples(rng, x);
  
  /* test */
  [% IF gperftools %]
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  [% END %]
  TicToc timer;
  int z, p, rep, time1, time2, time3;
  real sqerr;
  for (z = 0; z < ZS; ++z) {
    /* generate log-weights */
    if (z > 0) {
      addscal_elements(vec(x), 1.0);
    }
    g.logDensities(x, vec(lW), true);
    zs(z) = z;
    std::cerr << "z=" << z << ":";
  
    /* test on weight sets */
    for (p = 0; p < PS; ++p) {
      actualP = std::pow(2, p + 4);
      std::cerr << " " << actualP;
      actualPs(p) = actualP;
      BOOST_AUTO(lws, subrange(lw, 0, actualP));
      BOOST_AUTO(as, subrange(a, 0, actualP));
      BOOST_AUTO(os, subrange(o, 0, actualP));
    
      [% IF client.get_named_arg('resampler') == 'metropolis' %]
      real W = actualP*bi::exp(-0.25*z*z)/(2.0*BI_SQRT_TWO_PI);
      real wmax = (1.0/BI_SQRT_TWO_PI)/W;
      real beta = 1.0/actualP;
      real alpha = (1.0 - wmax)/(actualP*wmax);
      real epsilon = 1.0e-3;
      real lambda = 1.0 - alpha - beta;
      int B = (int)bi::ceil(bi::log(epsilon*(alpha + beta)/bi::max(alpha, beta))/bi::log(lambda));
      [% END %]
    
      for (rep = 0; rep < REPS; ++rep) {
        lws = subrange(column(lW, rep), 0, actualP);
        synchronize();
        timer.tic();
        
        [% IF client.get_named_arg('resampler') == 'stratified' %]
        if (ENABLE_SORT) {
          bi::sort(lws);
        }
        synchronize();
        time1 = timer.toc();
        
        resam.offspring(rng, lws, os, actualP);
        synchronize();
        time2 = timer.toc();
        
        //resam.offspringToAncestors(os, as);
        //resam.permute(as);
        synchronize();
        time3 = timer.toc();
        [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
        synchronize();
        time1 = timer.toc();
        
        real maxLogWeight = -BI_HALF_LOG_TWO_PI;
        resam.ancestors(rng, lws, as, maxLogWeight);
        synchronize();
        time2 = timer.toc();

        //resam.permute(as);
        resam.ancestorsToOffspring(as, os);
        synchronize();
        time3 = timer.toc();
        [% ELSIF client.get_named_arg('resampler') == 'metropolis' %]
        synchronize();
        time1 = timer.toc();

        resam.ancestors(rng, lws, as, B);
        synchronize();
        time2 = timer.toc();
        
        //resam.permute(as);
        resam.ancestorsToOffspring(as, os);
        synchronize();
        time3 = timer.toc();
        [% ELSE %]
        synchronize();
        time1 = timer.toc();

        resam.ancestors(rng, lws, as);
        synchronize();
        time2 = timer.toc();
        
        //resam.permute(as);
        resam.ancestorsToOffspring(as, os);
        synchronize();
        time3 = timer.toc();
        [% END %]
        
        sqerr = bi::sqrt(resam.error(lws, os));
        
        sqerrs(rep, p) = sqerr;
        times1(rep, p) = time1;
        times2(rep, p) = time2;
        times3(rep, p) = time3;
      }
    }
    
    /* output */
    if (out != NULL) {
      sqerrVar->set_cur(z, 0, 0);
      sqerrVar->put(sqerrs.buf(), 1, PS, REPS);
      time1Var->set_cur(z, 0, 0);
      time1Var->put(times1.buf(), 1, PS, REPS);
      time2Var->set_cur(z, 0, 0);
      time2Var->put(times2.buf(), 1, PS, REPS);
      time3Var->set_cur(z, 0, 0);
      time3Var->put(times3.buf(), 1, PS, REPS);
    }
    std::cerr << std::endl;
  }
  
  PVar->put(actualPs.buf(), PS);
  zVar->put(zs.buf(), ZS);

  [% IF gperftools %]
  ProfilerStop();
  [% END %]
  
  /* clean up */
  out->sync();
  delete out;

  return 0;
}

