[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/random/Random.hpp"
#include "bi/method/Simulator.hpp"
#include "bi/buffer/SparseInputNetCDFBuffer.hpp"
#include "bi/buffer/SimulatorNetCDFBuffer.hpp"
#include "bi/misc/TicToc.hpp"

#include <iostream>
#include <string>
#include <unistd.h>
#include <getopt.h>

#ifndef ENABLE_CUDA
#define LOCATION ON_HOST
#else
#define LOCATION ON_DEVICE
#endif

int main(int argc, char* argv[]) {
  using namespace bi;

  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]

  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  #endif
  
  /* NetCDF init */
  NcError ncErr(NcError::silent_nonfatal);
  
  /* bi init */
  bi_init(THREADS);

  /* random number generator */
  Random rng(SEED);

  /* model */
  model_type m;

  /* state */
  State<model_type,LOCATION> s(P);
  P = s.size(); // may change according to implementation
  
  /* inputs */
  SparseInputNetCDFBuffer *inInput = NULL, *inInit = NULL;
  if (!INPUT_FILE.empty()) {
    inInput = new SparseInputNetCDFBuffer(m, INPUT_FILE, INPUT_NS, INPUT_NP);
  }
  if (!INIT_FILE.empty()) {
    inInit = new SparseInputNetCDFBuffer(m, INIT_FILE, INIT_NS, INIT_NP);
  }

  /* output */
  SimulatorNetCDFBuffer* out = NULL;
  if (ENABLE_OUTPUT && !OUTPUT_FILE.empty()) {
    out = new SimulatorNetCDFBuffer(m, P, K, OUTPUT_FILE,
        NetCDFBuffer::REPLACE);
  }

  /* simulator */
  BOOST_AUTO(sim, (SimulatorFactory<LOCATION>::create(m, inInput, out)));

  /* simulate */
  [% IF gperftools %]
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  [% END %]
  TicToc timer;
  
  sim->simulate(rng, T, s, inInit);
  synchronize();

  /* output timing results */
  if (ENABLE_TIMING) {
    std::cout << timer.toc() << std::endl;
  }
  [% IF gperftools %]
  ProfilerStop();
  [% END %]

  delete sim;
  delete out;
  delete inInput;
  delete inInit;

  return 0;
}
