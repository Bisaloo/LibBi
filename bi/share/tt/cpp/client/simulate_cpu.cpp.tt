[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/random/Random.hpp"
#include "bi/method/Forcer.hpp"
#include "bi/method/Observer.hpp"
#include "bi/method/Simulator.hpp"
#include "bi/cache/SimulatorCache.hpp"
#include "bi/buffer/SparseInputNetCDFBuffer.hpp"
#include "bi/misc/TicToc.hpp"

#include <iostream>
#include <string>
#include <unistd.h>
#include <getopt.h>

#ifndef ENABLE_CUDA
#define LOCATION ON_HOST
#else
#define LOCATION ON_DEVICE
#endif

int main(int argc, char* argv[]) {
  using namespace bi;

  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]

  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  #endif
  
  /* NetCDF init */
  NcError ncErr(NcError::silent_nonfatal);
  
  /* bi init */
  bi_init(THREADS);

  /* random number generator */
  Random rng(SEED);

  /* model */
  model_type m;

  /* state */
  State<model_type,LOCATION> s(P);
  P = s.size(); // may change according to implementation
  
  /* inputs */
  SparseInputNetCDFBuffer *bufInput = NULL, *bufInit = NULL, *bufObs = NULL;
  if (!INPUT_FILE.empty()) {
    bufInput = new SparseInputNetCDFBuffer(m, INPUT_FILE, INPUT_NS, INPUT_NP);
  }
  if (!INIT_FILE.empty()) {
    bufInit = new SparseInputNetCDFBuffer(m, INIT_FILE, INIT_NS, INIT_NP);
  }
  if (!OBS_FILE.empty()) {
    bufObs = new SparseInputNetCDFBuffer(m, OBS_FILE, OBS_NS, OBS_NP);
  }

  /* schedule */
  Schedule sched(m, START_TIME, T, K, bufInput, bufObs);

  /* output */
  SimulatorNetCDFBuffer* bufOutput = NULL;
  if (WITH_OUTPUT && !OUTPUT_FILE.empty()) {
    bufOutput = new SimulatorNetCDFBuffer(m, P, sched.numOutputs(), OUTPUT_FILE,
        NetCDFBuffer::REPLACE);
  }

  /* simulator */
  BOOST_AUTO(in, bi::ForcerFactory<LOCATION>::create(bufInput));
  BOOST_AUTO(obs, bi::ObserverFactory<LOCATION>::create(bufObs));
  BOOST_AUTO(out, bi::SimulatorCacheFactory<LOCATION>::create(bufOutput));
  BOOST_AUTO(sim, bi::SimulatorFactory::create(m, in, obs, out));

  /* simulate */
  #ifdef ENABLE_GPERFTOOLS
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  #endif
  TicToc timer;
  
  sim->simulate(rng, sched.begin(), sched.end(), s, bufInit);
  synchronize();

  /* output timing results */
  if (WITH_TIMING) {
    std::cout << timer.toc() << std::endl;
  }
  #ifdef ENABLE_GPERFTOOLS
  ProfilerStop();
  #endif

  delete sim;
  delete out;
  delete obs;
  delete in;
  delete bufOutput;
  delete bufObs;
  delete bufInit;
  delete bufInput;

  return 0;
}
