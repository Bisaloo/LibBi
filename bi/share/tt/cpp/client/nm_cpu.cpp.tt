[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/random/Random.hpp"
#include "bi/method/NelderMeadOptimiser.hpp"
[% IF client.get_named_arg('filter') == 'ekf' %]
#include "bi/method/ExtendedKalmanFilter.hpp"
[% ELSE %]
#include "bi/method/ParticleFilter.hpp"
#include "bi/method/AuxiliaryParticleFilter.hpp"
#include "bi/method/AdaptiveNParticleFilter.hpp"
#include "bi/method/StratifiedResampler.hpp"
#include "bi/method/MultinomialResampler.hpp"
#include "bi/method/MetropolisResampler.hpp"
#include "bi/method/KernelResampler.hpp"
[% END %]
#include "bi/buffer/SparseInputNetCDFBuffer.hpp"
#include "bi/buffer/KalmanFilterNetCDFBuffer.hpp"
#include "bi/buffer/ParticleFilterNetCDFBuffer.hpp"
#include "bi/buffer/FlexiParticleFilterNetCDFBuffer.hpp"
#include "bi/buffer/OptimiserNetCDFBuffer.hpp"
#include "bi/misc/TicToc.hpp"

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <sys/time.h>
#include <getopt.h>

#ifdef ENABLE_CUDA
#define LOCATION ON_DEVICE
#else
#define LOCATION ON_HOST
#endif

using namespace bi;

int main(int argc, char* argv[]) {
  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]

  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  #endif
  
  /* NetCDF init */
  NcError ncErr(NcError::silent_nonfatal);
  
  /* bi init */
  bi_init(THREADS);

  /* model */
  model_type m;
  
  /* random number generator */
  Random rng(SEED);

  /* state and intermediate results */
  State<model_type,LOCATION> s(m, P);
  P = s.size(); // may change according to implementation

  /* inputs */
  SparseInputNetCDFBuffer *inInput = NULL, *inInit = NULL;
  if (!INPUT_FILE.empty()) {
    inInput = new SparseInputNetCDFBuffer(m, INPUT_FILE, INPUT_NS, INPUT_NP);
  }
  if (!INIT_FILE.empty()) {
    inInit = new SparseInputNetCDFBuffer(m, INIT_FILE, INIT_NS, INIT_NP);
  }
  SparseInputNetCDFBuffer inObs(m, OBS_FILE, OBS_NS, OBS_NP);
  const int Y = inObs.countUniqueTimes(T);

  /* filter output */
  [% IF client.get_named_arg('filter') == 'ekf' %]
  KalmanFilterNetCDFBuffer* outFilter = NULL;
  if (!FILTER_FILE.empty()) {
      outFilter = new KalmanFilterNetCDFBuffer(m, P, Y, FILTER_FILE, NetCDFBuffer::REPLACE);
  }
  [% ELSIF %]
  FlexiParticleFilterNetCDFBuffer* outFilter = NULL;
  if (!FILTER_FILE.empty()) {
    outFilter = new FlexiParticleFilterNetCDFBuffer(m, Y, FILTER_FILE, NetCDFBuffer::REPLACE);
  }
  [% ELSE %]
  ParticleFilterNetCDFBuffer* outFilter = NULL;
  if (!FILTER_FILE.empty()) {
      outFilter = new ParticleFilterNetCDFBuffer(m, P, Y, FILTER_FILE, NetCDFBuffer::REPLACE);
  }
  [% END %]

  /* output */
  OptimiserNetCDFBuffer* out = NULL;
  if (ENABLE_OUTPUT && !OUTPUT_FILE.empty()) {
    out = new OptimiserNetCDFBuffer(m, OUTPUT_FILE, NetCDFBuffer::REPLACE);
  }
  
  /* filter */
  [% IF client.get_named_arg('filter') == 'ekf' %]
    BOOST_AUTO(filter, (ExtendedKalmanFilterFactory<LOCATION>::create(m, inInput, &inObs, outFilter)));
  [% ELSE %]
    /* resampler */
    [% IF client.get_named_arg('resampler') == 'kernel' %]
    real h;
    if (B_ABS > 0.0) {
      h = B_ABS;
    } else {
      h = B_REL*hopt(N, P);
    }
    StratifiedResampler base(ENABLE_SORT);
    KernelResampler<StratifiedResampler> resam(&base, h, ENABLE_SHRINK);
    [% ELSIF client.get_named_arg('resampler') == 'metropolis' %]
    MetropolisResampler resam(C);
    [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
    MultinomialResampler resam(ENABLE_SORT);
    [% ELSE %]
    StratifiedResampler resam(ENABLE_SORT);
    [% END %]
    
    /* particle filter */
    [% IF client.get_named_arg('filter') == 'pf1' %]
    BOOST_AUTO(filter, (AuxiliaryParticleFilterFactory<LOCATION>::create(m, &resam, ESS_REL, inInput, &inObs, outFilter)));
    [% ELSIF client.get_named_arg('filter') == 'anpf' %]
    /* stopper */
    [% IF client.get_named_arg('stopper') == 'deterministic' %]
    Stopper stopper(P);
    [% ELSIF client.get_named_arg('stopper') == 'sumofweights' %]
    SumOfWeightsStopper stopper(REL_THRESHOLD, MAX_P);
    [% ELSIF client.get_named_arg('stopper') == 'miness' %]
    MinimumESSStopper stopper(REL_THRESHOLD, MAX_P);
    [% ELSIF client.get_named_arg('stopper') == 'stddev' %]
    StdDevStopper stopper(REL_THRESHOLD, MAX_P);
    [% ELSIF client.get_named_arg('stopper') == 'var' %]
    VarStopper stopper(REL_THRESHOLD, MAX_P);
    [% END %]
    BOOST_AUTO(filter, (AdaptiveNParticleFilterFactory<LOCATION>::create(m, &resam, &stopper, ESS_REL, BLOCK_P, inInput, &inObs, outFilter)));
    [% ELSE %]
    BOOST_AUTO(filter, (ParticleFilterFactory<LOCATION>::create(m, &resam, ESS_REL, inInput, &inObs, outFilter)));
    [% END %]
  [% END %]

  /* optimiser */
  OptimiserMode mode;
  if (MODE.compare("map") == 0) {
    mode = MAXIMUM_A_POSTERIORI;
  } else {
    mode = MAXIMUM_LIKELIHOOD;
  }    
  BOOST_AUTO(optimiser, (NelderMeadOptimiserFactory<LOCATION>::create(
      m, out, mode)));

  /* optimise */
  [% IF gperftools %]
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  [% END %]
  TicToc timer;
  
  optimiser->optimise(rng, T, s, filter, inInit, STOP_STEPS, STOP_SIZE);
  synchronize();

  /* output timing results */
  if (ENABLE_TIMING) {
    std::cout << timer.toc() << std::endl;
  }
  [% IF gperftools %]
  ProfilerStop();
  [% END %]

  delete filter;
  delete optimiser;
  delete inInput;
  delete inInit;
  delete outFilter;
  delete out;

  return 0;
}
