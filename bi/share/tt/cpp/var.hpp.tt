[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[% PROCESS macro.hpp.tt %]

[%-class_name = 'Var' _ var.get_name-%]
/**
 * @file
 *
 * @author Generated by genbi
 * $Rev$
 * $Date$
 */
#ifndef GENBI_[% class_name | upper %]_HPP
#define GENBI_[% class_name | upper %]_HPP

#include "bi/model/Var.hpp"
#include "bi/cuda/cuda.hpp"

[% FOREACH dim IN var.get_dims.unique-%]
#include "../dim/Dim[% dim.get_name %].hpp"
[% END-%]

[% create_var_coord(var) %]

/**
 * Variable: [% var.get_name %].
 */
class [% class_name %] : public bi::Var {
public:
  /**
   * Coordinate type.
   */
  typedef Coord[% var.get_name %] coord_type;

  /**
   * Constructor.
   */
  [% class_name %]();

  /**
   * Initialise dimensions. Called by Model::addVar() after construction.
   *
   * @tparam B Model type.
   *
   * @param m Model.
   */
  template<class B>
  void initDims(const B& m);
    
  /**
   * Id.
   */
  static const int ID = [% var.get_id %];

  /**
   * Size.
   */
  static const int START = [% model.get_var_start(var) %];
  
  /**
   * Size.
   */
  static const int SIZE = [% var.get_size %];

  /**
   * Number of dimensions.
   */
  static const int NUM_DIMS = [% var.num_dims %];
  
  [% IF var.num_dims == 2 %]
  /**
   * Number of rows.
   */
  static const int ROWS = [% var.get_dims.0.get_size %];
  
  /**
   * Number of columns.
   */
  static const int COLS = [% var.get_dims.1.get_size %];
  [%-END %]
  
  /**
   * Type.
   */
  static const bi::VarType TYPE = bi::
  [%-IF var.get_type == 'state'-%]
  D_VAR
  [%-ELSIF var.get_type == 'state_aux_'-%]
  DX_VAR
  [%-ELSIF var.get_type == 'input'-%]
  F_VAR
  [%-ELSIF var.get_type == 'noise'-%]
  R_VAR
  [%-ELSIF var.get_type == 'obs'-%]
  O_VAR
  [%-ELSIF var.get_type == 'param'-%]
  P_VAR
  [%-ELSIF var.get_type == 'param_aux_'-%]
  PX_VAR
  [%-END-%];
  
  /**
   * Output?
   */
  static const bool IO = [% var.get_named_arg('io').eval_const %];
};

inline [% class_name %]::[% class_name %]() : bi::Var("[% var.get_name %]", *this) {
  //
}

template<class B>
inline void [% class_name %]::initDims(const B& m) {
  [%-FOREACH dim IN var.get_dims %]
  dims[[% loop.index %]] = m.getDim([% dim.get_id %]);
  [%-END %]
}

#endif
