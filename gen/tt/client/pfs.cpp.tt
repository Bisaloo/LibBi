/**
 * @file
 *
 * @author Lawrence Murray <lawrence.murray@csiro.au>
 * $Rev$
 * $Date$
 */
#include "model/[% ClassName %].hpp"

#include "bi/cuda/cuda.hpp"
#include "bi/math/ode.hpp"
#include "bi/random/Random.hpp"
#include "bi/method/ParticleFilterSmoother.hpp"
#include "bi/buffer/ParticleFilterNetCDFBuffer.hpp"
#include "bi/buffer/ParticleSmootherNetCDFBuffer.hpp"
#include "bi/misc/TicToc.hpp"

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <sys/time.h>
#include <getopt.h>

//#ifdef USE_CPU
#define LOCATION ON_HOST
//#else
//#define LOCATION ON_DEVICE
//#endif

using namespace bi;

int main(int argc, char* argv[]) {
  /* model type */
  typedef [% ClassName %]<X_LEN,Y_LEN,Z_LEN> model_type;
  
  /* command line arguments */
  enum {
    SEED_ARG,
    INPUT_FILE_ARG,
    OUTPUT_FILE_ARG,
    OUTPUT_ARG,
    TIME_ARG,
    INCLUDE_PARAMETERS_ARG
  };
  int SEED = 0;
  std::string INPUT_FILE, OUTPUT_FILE;
  bool OUTPUT = false, TIME = false, INCLUDE_PARAMETERS = false;
  int c, option_index;

  option long_options[] = {
      {"seed", required_argument, 0, SEED_ARG },
      {"input-file", required_argument, 0, INPUT_FILE_ARG },
      {"output-file", required_argument, 0, OUTPUT_FILE_ARG },
      {"output", required_argument, 0, OUTPUT_ARG },
      {"time", required_argument, 0, TIME_ARG },
      {"include-parameters", required_argument, 0, INCLUDE_PARAMETERS_ARG },
      {0, 0, 0, 0}
  };
  const char* short_options = "";

  do {
    c = getopt_long(argc, argv, short_options, long_options, &option_index);
    if (optarg) {
      switch (c) {
      case SEED_ARG:
        SEED = atoi(optarg);
        break;
      case INPUT_FILE_ARG:
        INPUT_FILE = std::string(optarg);
        break;
      case OUTPUT_FILE_ARG:
        OUTPUT_FILE = std::string(optarg);
        break;
      case OUTPUT_ARG:
        OUTPUT = atoi(optarg);
        break;
      case TIME_ARG:
        TIME = atoi(optarg);
        break;
      case INCLUDE_PARAMETERS_ARG:
        INCLUDE_PARAMETERS = atoi(optarg);
        break;
      }
    }
  } while (c != -1);

  /* bi init */
  #ifdef __CUDACC__
  cudaThreadSetCacheConfig(cudaFuncCachePreferL1);
  #endif
  bi_omp_init();

  /* NetCDF error reporting */
  NcError ncErr(NcError::silent_nonfatal);

  /* model */
  model_type m;
  
  /* random number generator */
  Random rng(SEED);

  /* inputs */
  ParticleFilterNetCDFBuffer in(m, INPUT_FILE, NetCDFBuffer::READ_ONLY,
      INCLUDE_PARAMETERS ? STATIC_OWN : STATIC_SHARED);

  /* state and intermediate results */
  const int P = in.size1();
  const int T = in.size2();
  Static<LOCATION> theta(m, INCLUDE_PARAMETERS ? P : 1);
  State<LOCATION> s(m, P);

  /* output */
  ParticleSmootherNetCDFBuffer* out;
  if (OUTPUT) {
    out = new ParticleSmootherNetCDFBuffer(m, P, T, OUTPUT_FILE,
        NetCDFBuffer::REPLACE,
        INCLUDE_PARAMETERS ? STATIC_OWN : STATIC_SHARED);
  } else {
    out = NULL;
  }

  /* smooth */
  TicToc timer;
  if (INCLUDE_PARAMETERS) {
    BOOST_AUTO(smoother, (ParticleFilterSmootherFactory<LOCATION,STATIC_OWN>::create(m, out)));
    smoother->smooth(theta, s, &in);
    delete smoother;
  } else {
    BOOST_AUTO(smoother, (ParticleFilterSmootherFactory<LOCATION,STATIC_SHARED>::create(m, out)));
    smoother->smooth(theta, s, &in);
    delete smoother;
  }

  /* output timing results */
  if (TIME) {
    std::cout << timer.toc() << std::endl;
  }

  delete out;

  return 0;
}
