/**
 * @file
 *
 * @author Lawrence Murray <lawrence.murray@csiro.au>
 * $Rev$
 * $Date$
 */
#include "device.hpp"
#include "distros.hpp"
#include "model/[% ClassName %].hpp"

#include "bi/cuda/cuda.hpp"
#include "bi/math/ode.hpp"
#include "bi/state/State.hpp"
#include "bi/random/Random.hpp"
#include "bi/pdf/AdditiveExpGaussianPdf.hpp"
#include "bi/pdf/ExpGaussianMixturePdf.hpp"
#include "bi/method/ParticleMCMC.hpp"
#include "bi/method/ParticleFilter.hpp"
#include "bi/method/AuxiliaryParticleFilter.hpp"
#include "bi/method/ConditionalUnscentedParticleFilter.hpp"
#include "bi/method/MarginalUnscentedParticleFilter.hpp"
#include "bi/method/StratifiedResampler.hpp"
#include "bi/buffer/ParticleFilterNetCDFBuffer.hpp"
#include "bi/buffer/ParticleMCMCNetCDFBuffer.hpp"
#include "bi/buffer/SparseInputNetCDFBuffer.hpp"
#include "bi/buffer/ParticleFilterNetCDFBuffer.hpp"
#include "bi/buffer/AuxiliaryParticleFilterNetCDFBuffer.hpp"

#include "boost/typeof/typeof.hpp"

#include <iostream>
#include <iomanip>
#include <string>
#include <getopt.h>

#ifdef USE_CPU
#define LOCATION ON_HOST
#else
#define LOCATION ON_DEVICE
#endif

using namespace bi;

int main(int argc, char* argv[]) {
  /* model type */
  typedef [% ClassName %]<X_LEN,Y_LEN,Z_LEN> model_type;
  
  /* command line arguments */
  enum {
    ID_ARG,
    DELTA_ARG,
    ATOLER_ARG,
    RTOLER_ARG,
    SD2_ARG,
    ESS_REL_ARG,
    INIT_NS_ARG,
    FORCE_NS_ARG,
    OBS_NS_ARG,
    SEED_ARG,
    INIT_FILE_ARG,
    FORCE_FILE_ARG,
    OBS_FILE_ARG,
    OUTPUT_FILE_ARG,
    FILTER_FILE_ARG,
    RESAMPLER_ARG,
    FILTER_ARG,
    SORT_ARG,
    STARTING_TYPE_ARG,
    STARTING_FILE_ARG,
    INCLUDE_INITIAL_ARG
  };
  real T = 0.0, DELTA = 1.0, H = 1.0, RTOLER = 1.0e-3, ATOLER = 1.0e-3,
      SD2 = 0.0, ESS_REL = 1.0;
  int ID = 0, P = 1024, INIT_NS = 0, FORCE_NS = 0, OBS_NS = 0,
      SEED = 0, C = 1000, M = 10;
  std::string INIT_FILE, FORCE_FILE, OBS_FILE, FILTER_FILE, OUTPUT_FILE,
      STARTING_FILE;
  std::string STARTING_TYPE("prior"), RESAMPLER("stratified"),
      FILTER("bootstrap");
  bool INCLUDE_INITIAL = true, SORT = true;
  int c, option_index;

  option long_options[] = {
      {"id", required_argument, 0, ID_ARG },
      {"delta", required_argument, 0, DELTA_ARG },
      {"atoler", required_argument, 0, ATOLER_ARG },
      {"rtoler", required_argument, 0, RTOLER_ARG },
      {"sd2", required_argument, 0, SD2_ARG },
      {"ess-rel", required_argument, 0, ESS_REL_ARG },
      {"init-ns", required_argument, 0, INIT_NS_ARG },
      {"force-ns", required_argument, 0, FORCE_NS_ARG },
      {"obs-ns", required_argument, 0, OBS_NS_ARG },
      {"seed", required_argument, 0, SEED_ARG },
      {"init-file", optional_argument, 0, INIT_FILE_ARG },
      {"force-file", required_argument, 0, FORCE_FILE_ARG },
      {"obs-file", required_argument, 0, OBS_FILE_ARG },
      {"filter-file", required_argument, 0, FILTER_FILE_ARG },
      {"starting-file", optional_argument, 0, STARTING_FILE_ARG },
      {"output-file", required_argument, 0, OUTPUT_FILE_ARG },
      {"starting-type", required_argument, 0, STARTING_TYPE_ARG },
      {"resampler", required_argument, 0, RESAMPLER_ARG },
      {"filter", required_argument, 0, FILTER_ARG },
      {"sort", required_argument, 0, SORT_ARG },
      {"include-initial", required_argument, 0, INCLUDE_INITIAL_ARG },
      {0, 0, 0, 0}
  };
  const char* short_options = "T:h:P:C:M:";

  do {
    c = getopt_long(argc, argv, short_options, long_options, &option_index);
    if (optarg) {
      switch (c) {
      case ID_ARG:
        ID = atoi(optarg);
        break;
      case DELTA_ARG:
        DELTA = atof(optarg);
        break;
      case ATOLER_ARG:
        ATOLER = atof(optarg);
        break;
      case RTOLER_ARG:
        RTOLER = atof(optarg);
        break;
      case SD2_ARG:
        SD2 = atof(optarg);
        break;
      case ESS_REL_ARG:
        ESS_REL = atof(optarg);
        break;
      case INIT_NS_ARG:
        INIT_NS = atoi(optarg);
        break;
      case FORCE_NS_ARG:
        FORCE_NS = atoi(optarg);
        break;
      case OBS_NS_ARG:
        OBS_NS = atoi(optarg);
        break;
      case SEED_ARG:
        SEED = atoi(optarg);
        break;
      case INIT_FILE_ARG:
        INIT_FILE = std::string(optarg);
        break;
      case FORCE_FILE_ARG:
        FORCE_FILE = std::string(optarg);
        break;
      case OBS_FILE_ARG:
        OBS_FILE = std::string(optarg);
        break;
      case OUTPUT_FILE_ARG:
        OUTPUT_FILE = std::string(optarg);
        break;
      case FILTER_FILE_ARG:
        FILTER_FILE = std::string(optarg);
        break;
      case STARTING_FILE_ARG:
        STARTING_FILE = std::string(optarg);
        break;
      case STARTING_TYPE_ARG:
        STARTING_TYPE = std::string(optarg);
        break;
      case RESAMPLER_ARG:
        RESAMPLER = std::string(optarg);
        break;
      case FILTER_ARG:
        FILTER = std::string(optarg);
        break;
      case SORT_ARG:
        SORT = atoi(optarg);
        break;
      case INCLUDE_INITIAL_ARG:
        INCLUDE_INITIAL = atoi(optarg);
        break;
      case 'T':
        T = atof(optarg);
        break;
      case 'h':
        H = atof(optarg);
        break;
      case 'P':
        P = atoi(optarg);
        break;
      case 'C':
        C = atoi(optarg);
        break;
      case 'M':
        M = atoi(optarg);
        break;
      }
    }
  } while (c != -1);

  /* bi init */
  #ifdef __CUDACC__
  int dev = chooseDevice(ID);
  std::cerr << "Using device " << dev << std::endl;
  cudaThreadSetCacheConfig(cudaFuncCachePreferL1);
  #endif
  bi_omp_init();
  bi_ode_init(H, ATOLER, RTOLER);
  h_ode_set_nsteps(100u);

  /* NetCDF error reporting */
  NcError ncErr(NcError::silent_nonfatal);

  /* random number generator */
  Random rng(SEED);

  /* model */
  model_type m;
  const int ND = m.getNetSize(D_NODE);
  const int NC = m.getNetSize(C_NODE);
  const int NP = m.getNetSize(P_NODE);
  const int N = (INCLUDE_INITIAL) ? ND + NC + NP : NP;

  /* scaling factors */
  if (SD2 <= 0.0) {
    SD2 = std::pow(2.4,2)/N;
  }

  /* state and intermediate results */
  Static<LOCATION> theta(m);
  State<LOCATION> s(m, P);
  host_vector<real> x(N); // initial state of chain

  /* initialise from prior */
  m.getPrior<D_NODE>().samples(rng, s.get(D_NODE));
  m.getPrior<C_NODE>().samples(rng, s.get(C_NODE));
  m.getPrior<P_NODE>().samples(rng, theta.get(P_NODE));   
  
  /* inputs */
  SparseInputNetCDFBuffer *inForce = NULL, *inInit = NULL;
  if (!FORCE_FILE.empty()) {
    inForce = new SparseInputNetCDFBuffer(m, FORCE_FILE, FORCE_NS);
  }
  if (!INIT_FILE.empty()) {
    inInit = new SparseInputNetCDFBuffer(m, INIT_FILE, INIT_NS);
    inInit->read0(P_NODE, theta.get(P_NODE));
    inInit->read0(D_NODE, s.get(D_NODE));
    inInit->read0(C_NODE, s.get(C_NODE));
    if (INCLUDE_INITIAL) {
      subrange(x, 0, ND) = row(s.get(D_NODE), 0);
      subrange(x, ND, NC) = row(s.get(C_NODE), 0);
      subrange(x, ND + NC, NP) = row(theta.get(P_NODE), 0);
    } else {
      x = row(theta.get(P_NODE), 0);
    }
  }
  SparseInputNetCDFBuffer inObs(m, OBS_FILE, OBS_NS);
  const int Y = inObs.countUniqueTimes(T);
  
  /* outputs */
  ParticleMCMCNetCDFBuffer out(m, C, Y, OUTPUT_FILE, NetCDFBuffer::REPLACE);
  ParticleFilterNetCDFBuffer outFilter(m, P, Y, FILTER_FILE, NetCDFBuffer::REPLACE);

  /* filter */
  StratifiedResampler resam(rng, SORT);
  BOOST_AUTO(filter, ParticleFilterFactory<LOCATION>::create(m, rng, DELTA,
      inForce, &inObs, &outFilter));

  /* sampler */
  BOOST_AUTO(mcmc, ParticleMCMCFactory<LOCATION>::create(m, rng, &out,
      INCLUDE_INITIAL ? INITIAL_CONDITIONED : INITIAL_SAMPLED));
  
  /* prior */
  BOOST_AUTO(p0, mcmc->getPrior());
  
  /* initialise */
  int attempts = 0;
  do {
    BI_ERROR(attempts < 1000, "Could not initialise within bounds of prior within 1000 attempts");
    sample_starting(m, STARTING_TYPE, STARTING_FILE, SD2, INCLUDE_INITIAL, rng, x);
    ++attempts;
  } while (!(p0(x) > 0.0));
  
  /* sample */
  if (FILTER.compare("apf") == 0) {
    /* with auxiliary particle filter */
    AuxiliaryParticleFilterNetCDFBuffer outFilter(m, P, Y, FILTER_FILE,
        NetCDFBuffer::REPLACE);
    BOOST_AUTO(filter, AuxiliaryParticleFilterFactory<LOCATION>::create(m, rng, DELTA,
        inForce, &inObs, &outFilter));

    mcmc->init(x, T, theta, s, filter, &resam);
    mcmc->output0(filter);
    for (c = 0; c < C; ++c) {
      if ((c % M) == 0) {
        attempts = 0;
        do {
          BI_ERROR(attempts < 1000, "Could not propose within bounds of prior within 1000 attempts");
          sample_starting(m, STARTING_TYPE, STARTING_FILE, SD2, INCLUDE_INITIAL, rng, x);
          ++attempts;
        } while (!(p0(x) > 0.0));
      }
      mcmc->proposal(x);
      mcmc->prior();
      mcmc->likelihood(T, theta, s, filter, &resam, ESS_REL);
      mcmc->accept(filter);
      mcmc->output(c);
      mcmc->report(c);
    }
    mcmc->term(theta);
    
    delete filter;
  } else if (FILTER.compare("mupf") == 0) {
      /* with marginal unscented particle filter */
      ParticleFilterNetCDFBuffer outFilter(m, P, Y, FILTER_FILE,
          NetCDFBuffer::REPLACE);
      BOOST_AUTO(filter, MarginalUnscentedParticleFilterFactory<LOCATION>::create(m, rng, DELTA,
          inForce, &inObs, &outFilter));

      mcmc->init(x, T, theta, s, filter, &resam);
      mcmc->output0(filter);
      for (c = 0; c < C; ++c) {
        if ((c % M) == 0) {
          attempts = 0;
          do {
            BI_ERROR(attempts < 1000, "Could not propose within bounds of prior within 1000 attempts");
            sample_starting(m, STARTING_TYPE, STARTING_FILE, SD2, INCLUDE_INITIAL, rng, x);
            ++attempts;
          } while (!(p0(x) > 0.0));
        }
        mcmc->proposal(x);
        mcmc->prior();
        mcmc->likelihood(T, theta, s, filter, &resam, ESS_REL);
        mcmc->accept(filter);
        mcmc->output(c);
        mcmc->report(c);
      }
      mcmc->term(theta);
      
      delete filter;
  } else if (FILTER.compare("cupf") == 0) {
      /* with conditional unscented particle filter */
      ParticleFilterNetCDFBuffer outFilter(m, P, Y, FILTER_FILE,
          NetCDFBuffer::REPLACE);
      BOOST_AUTO(filter, ConditionalUnscentedParticleFilterFactory<LOCATION>::create(m, rng, DELTA,
          inForce, &inObs, &outFilter));

      mcmc->init(x, T, theta, s, filter, &resam);
      mcmc->output0(filter);
      for (c = 0; c < C; ++c) {
        if ((c % M) == 0) {
          attempts = 0;
          do {
            BI_ERROR(attempts < 1000, "Could not propose within bounds of prior within 1000 attempts");
            sample_starting(m, STARTING_TYPE, STARTING_FILE, SD2, INCLUDE_INITIAL, rng, x);
            ++attempts;
          } while (!(p0(x) > 0.0));
        }
        mcmc->proposal(x);
        mcmc->prior();
        mcmc->likelihood(T, theta, s, filter, &resam, ESS_REL);
        mcmc->accept(filter);
        mcmc->output(c);
        mcmc->report(c);
      }
      mcmc->term(theta);
      
      delete filter;
  } else {
    /* with bootstrap particle filter */
    ParticleFilterNetCDFBuffer outFilter(m, P, Y, FILTER_FILE,
        NetCDFBuffer::REPLACE);
    BOOST_AUTO(filter, ParticleFilterFactory<LOCATION>::create(m, rng, DELTA,
        inForce, &inObs, &outFilter));

    mcmc->init(x, T, theta, s, filter, &resam);
    mcmc->output0(filter);
    for (c = 0; c < C; ++c) {
      if ((c % M) == 0) {
        attempts = 0;
        do {
          BI_ERROR(attempts < 1000, "Could not propose within bounds of prior within 1000 attempts");
          sample_starting(m, STARTING_TYPE, STARTING_FILE, SD2, INCLUDE_INITIAL, rng, x);
          ++attempts;
        } while (!(p0(x) > 0.0));
      }
      mcmc->proposal(x);
      mcmc->prior();
      mcmc->likelihood(T, theta, s, filter, &resam, ESS_REL);
      mcmc->accept(filter);
      mcmc->output(c);
      mcmc->report(c);
    }
    mcmc->term(theta);
    
    delete filter;
  }

  delete mcmc;
  delete filter;
  delete inForce;
  delete inInit;

  return 0;
}
