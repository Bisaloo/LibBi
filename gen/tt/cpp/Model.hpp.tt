[%-ClassName = "${Name}Model" | ucfirst-%]
[%-PriorTypes = [ 'S', 'D', 'C', 'R', 'F', 'O', 'P' ]-%]

[%-USE DBI(dbh = dbh)-%]

[%-GetNodes = DBI.prepare("SELECT Name, HasX, HasY, HasZ FROM Node WHERE Category <> 'Intermediate result' AND Category <> 'Constant' ORDER BY Position ASC")-%]
[%-GetDistinctNodes = DBI.prepare("SELECT DISTINCT Name FROM Node WHERE Category <> 'Intermediate result' AND Category <> 'Constant' ORDER BY Position ASC")-%]
[%-GetNodesWithTrait = DBI.prepare('SELECT * FROM Node, NodeTrait WHERE Trait = ? AND NodeTrait.Node = Node.Name')-%]
[%-GetNodesWithPrior = DBI.prepare("SELECT DISTINCT Name, Position FROM Node, NodeTrait WHERE Trait IN ('HAS_GAUSSIAN_PRIOR', 'HAS_NORMAL_PRIOR', 'HAS_LOG_NORMAL_PRIOR') AND NodeTrait.Node = Node.Name INTERSECT SELECT Name, Position FROM Node, NodeTrait WHERE Trait = ? AND NodeTrait.Node = Node.Name ORDER BY Position")-%]
[%-GetParentsWithTrait = DBI.prepare("SELECT DISTINCT Parent.ParentNode, Parent.ChildNode, Parent.XOffset, Parent.YOffset, Parent.ZOffset, Parent.Position FROM Parent, Node, NodeTrait WHERE NodeTrait.Trait = ? AND NodeTrait.Node = Parent.ParentNode AND Parent.ChildNode = Node.Name ORDER BY Node.Position, Parent.Position")-%]
[%-GetEdges = DBI.prepare("SELECT DISTINCT Parent.ParentNode, Parent.ChildNode, Parent.XOffset, Parent.YOffset, Parent.ZOffset FROM Node, Parent WHERE Node.Category <> 'Intermediate result' AND Node.Category <> 'Constant' AND Parent.ParentNode = Node.Name ORDER BY Parent.Position")-%]

/**
 * @file
 *
 * @author Generated by spec2x
 * $Rev$
 * $Date$
 */
#ifndef BIM_[% ClassName | upper %]_HPP
#define BIM_[% ClassName | upper %]_HPP

[% FOREACH Node = GetDistinctNodes.execute-%]
#include "[% Node.Name | ucfirst %]Node.hpp"
[% END-%]

#include "bi/model/BayesNet.hpp"
#include "bi/model/model.hpp"
#include "bi/typelist/TypeList.hpp"
#include "bi/pdf/ExpGaussianPdf.hpp"

#include <vector>

[% FOREACH Type IN [ 'S', 'D', 'C', 'R', 'F', 'O', 'P' ]-%]
/**
 * Type list for [% Type | lower %]-nodes.
 */
BEGIN_TYPELIST([% Name %][% Type %]TypeList)
[% FOREACH Node = GetNodesWithTrait.execute("IS_${Type}_NODE")-%]
SINGLE_TYPE(1, [% Node.Name | ucfirst %]Node)
[% END-%]
END_TYPELIST()
[% END-%]

[%-FOREACH Type IN [ 'S', 'D', 'C', 'R', 'F', 'P'] %]
/* [% Type | lower %]-parents */
[% FOREACH Parent = GetParentsWithTrait.execute("IS_${Type}_NODE")-%]
SET_PA([% Type | lower %], [% Parent.ChildNode | ucfirst %]Node, [% Parent.Position %], [% Parent.ParentNode | ucfirst %]Node, [% Parent.XOffset %], [% Parent.YOffset %], [% Parent.ZOffset %])
[% END-%]
[% END-%]

/**
 * [% Description %]
 *
 * @tparam XN Size of x-dimension.
 * @tparam YN Size of y-dimension.
 * @tparam ZN Size of z-dimension.
 */
template<int XN = 1, int YN = 1, int ZN = 1>
class [% ClassName %] : public bi::BayesNet {
public:
  /**
   * Type of prior distributions.
   */
 typedef bi::ExpGaussianPdf<> prior_type;

  [%-FOREACH Type IN [ 'S', 'D', 'C', 'R', 'F', 'O', 'P' ] %]
  /**
   * Type list for [% Type | lower %]-net.
   */
  typedef GET_TYPELIST([% Name %][% Type %]TypeList) [% Type %]TypeList;
  [% END-%]

  [%-FOREACH Dim IN [ 'X', 'Y', 'Z' ] %]
  /**
   * Size of [% Dim | lower %]-dimension.
   */
  static const int N[% Dim %] = [% Dim %]N;
  [% END-%]

  /**
   * Constructor.
   */
  [% ClassName %]();

  /**
   * Get prior.
   *
   * @param type Node type.
   *
   * @return Prior over nodes of given type.
   */
  prior_type& getPrior(const bi::NodeType type);

private:
  /*
   * Nodes.
   */
  [% FOREACH Node = GetNodes.execute-%]
  [%-Node.Name | ucfirst %]Node node[% Node.Name %];
  [% END-%]

  /**
   * Node priors, indexed by type.
   */
  std::vector<bi::ExpGaussianPdf<> > priors;

};

#include "bi/traits/prior_traits.hpp"
#include "bi/traits/likelihood_traits.hpp"
#include "bi/math/host_vector.hpp"
#include "bi/math/host_matrix.hpp"

template<int XN, int YN, int ZN>
[% ClassName %]<XN,YN,ZN>::[% ClassName %]() {
  using namespace bi;

  init<[% ClassName %]>();

  /* nodes */
  [% FOREACH Node = GetNodes.execute-%]
addNode<[% ClassName %],[% Node.Name | ucfirst %]Node>(node[% Node.Name %]);
  [% END-%]

  /* edges */
  [% FOREACH Edge = GetEdges.execute-%]
addArc(node[% Edge.ParentNode %], node[% Edge.ChildNode %]);
  [% END %]

  /* priors */
  [% FOREACH Type IN PriorTypes-%]
  [%-Size = "getNetSize(${Type}_NODE)"-%]
  priors.push_back(prior_type([% Size %]));
  prior_type& [% Type | lower %]0 = priors.back();
  host_vector<>& mu_[% Type | lower %] = [% Type | lower %]0.mean();
  host_matrix<>& Sigma_[% Type | lower %] = [% Type | lower %]0.cov();

  [% FOREACH Node = GetNodesWithPrior.execute("IS_${Type}_NODE") %]
  mu_[% Type | lower %]([% loop.index %]) = node[% Node.Name %].mu0();
  Sigma_[% Type | lower %]([% loop.index %],[% loop.index %]) = std::pow(node[% Node.Name %].sigma0(), 2);
  [% END %]

  [% FOREACH Node = GetNodesWithTrait.execute("IS_${Type}_NODE") %]
  if (has_log_normal_prior<[% Node.Name | ucfirst %]Node>::value ||
      is_log_normal_likelihood<[% Node.Name | ucfirst %]Node>::value) {
    [% Type |lower %]0.addLog([% loop.index %]);
  }
  [% END %]
  [% Type | lower %]0.setMean(mu_[% Type | lower %]);
  [% Type | lower %]0.setCov(Sigma_[% Type | lower %]);
  [% END-%]
}

template<int XN, int YN, int ZN>
inline typename [% ClassName %]<XN,YN,ZN>::prior_type& [% ClassName %]<XN,YN,ZN>::getPrior(
    const bi::NodeType type) {
  return priors[type];
}

#endif
