[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev: 2709 $
## $Date: 2012-06-13 14:24:04 +0800 (Wed, 13 Jun 2012) $
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/random/Random.hpp"
#include "bi/method/Simulator.hpp"
#include "bi/misc/TicToc.hpp"
#include "testbi/Test.hpp"

#include <iostream>
#include <string>
#include <unistd.h>
#include <getopt.h>

#ifndef ENABLE_CUDA
#define LOCATION ON_HOST
#else
#define LOCATION ON_DEVICE
#endif

using namespace bi;

int main(int argc, char* argv[]) {
  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]

  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  #endif
  
  /* NetCDF init */
  NcError ncErr(NcError::silent_nonfatal);
  
  /* bi init */
  bi_init(THREADS);

  /* random number generator */
  Random rng(SEED);

  /* test */
  [% IF gperftools %]
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  [% END %]
  TicToc timer;
  
  bool passed = Test::test(rng);
  std::cerr << "passed = " << passed << std::endl;
  synchronize();

  /* output timing results */
  if (ENABLE_TIMING) {
    std::cout << timer.toc() << std::endl;
  }
  [% IF gperftools %]
  ProfilerStop();
  [% END %]

  return 0;
}

