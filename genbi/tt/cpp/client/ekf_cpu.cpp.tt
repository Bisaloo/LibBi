[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev: 2251 $
## $Date: 2011-12-07 13:35:43 +0800 (Wed, 07 Dec 2011) $
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/cuda/cuda.hpp"
#include "bi/random/Random.hpp"
#include "bi/method/ExtendedKalmanFilter.hpp"
#include "bi/buffer/SparseInputNetCDFBuffer.hpp"
#include "bi/buffer/KalmanFilterNetCDFBuffer.hpp"
#include "bi/misc/TicToc.hpp"

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <sys/time.h>
#include <getopt.h>

#ifdef ENABLE_GPU
#define LOCATION ON_DEVICE
#else
#define LOCATION ON_HOST
#endif

using namespace bi;

int main(int argc, char* argv[]) {
  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]

  /* bi init */
  #ifdef __CUDACC__
  cudaThreadSetCacheConfig(cudaFuncCachePreferL1);
  #endif
  bi_omp_init(THREADS);

  /* NetCDF error reporting */
  NcError ncErr(NcError::silent_nonfatal);

  /* model */
  model_type m;
  
  /* random number generator */
  Random rng(SEED);

  /* state and intermediate results */
  State<model_type,LOCATION> s(m, P);
  P = s.size(); // may change according to implementation

  /* inputs */
  SparseInputNetCDFBuffer *inInput = NULL, *inInit = NULL;
  if (!INPUT_FILE.empty()) {
    inInput = new SparseInputNetCDFBuffer(m, INPUT_FILE, INPUT_NS);
  }
  if (!INIT_FILE.empty()) {
    inInit = new SparseInputNetCDFBuffer(m, INIT_FILE, INIT_NS);
  }
  SparseInputNetCDFBuffer inObs(m, OBS_FILE, OBS_NS);

  /* output */
  KalmanFilterNetCDFBuffer* out;
  if (OUTPUT) {
    out = new KalmanFilterNetCDFBuffer(m, P, 2*inObs.countUniqueTimes(T),
        OUTPUT_FILE, NetCDFBuffer::REPLACE);
  } else {
    out = NULL;
  }
  
  /* filter */
  TicToc timer;
  BOOST_AUTO(filter, (ExtendedKalmanFilterFactory<LOCATION>::create(m, inInput, &inObs, out)));
  filter->filter(rng, T, s, inInit);
  delete filter;

  /* output timing results */
  if (TIME) {
    std::cout << timer.toc() << std::endl;
  }

  delete inInput;
  delete inInit;
  delete out;

  return 0;
}
