[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-PROCESS block/misc/header.hpp.tt-%]

[% create_action_typetree(block) %]

/**
 * Block: [% block.get_name %].
 */
class [% class_name %] {
public:
  [% create_action_typedef(block) %]
  
  [% declare_dynamic_function('sample') %]
  [% declare_dynamic_function('logdensity') %]
  [% declare_dynamic_function('maxlogdensity') %]

  [% declare_static_function('sample') %]
  [% declare_static_function('logdensity') %]
  [% declare_static_function('maxlogdensity') %]

  [% declare_sparse_static_function('sample') %]
  [% declare_sparse_static_function('logdensity') %]
  [% declare_sparse_static_function('maxlogdensity') %]
};

#include "bi/updater/StaticSampler.hpp"
#include "bi/updater/StaticLogDensity.hpp"
#include "bi/updater/StaticMaxLogDensity.hpp"
#include "bi/updater/SparseStaticSampler.hpp"
#include "bi/updater/SparseStaticLogDensity.hpp"
#include "bi/updater/SparseStaticMaxLogDensity.hpp"

[% sig_dynamic_function('sample') %] {
  BI_ERROR(false, "Cannot sample from uninformative distribution");
}

[% sig_dynamic_function('logdensity') %] {
  if (onDelta) {
    logDensities(s, lp);
  }
}

[% sig_dynamic_function('maxlogdensity') %] {
  if (onDelta) {
    maxLogDensities(s, lp);
  }
}

[% sig_static_function('sample') %] {
  BI_ERROR(false, "Cannot sample from uninformative distribution");
}

[% sig_static_function('logdensity') %] {
  bi::StaticLogDensity<[% model_class_name %],action_typelist>::logDensities(s, lp);
}

[% sig_static_function('maxlogdensity') %] {
  bi::StaticMaxLogDensity<[% model_class_name %],action_typelist>::maxLogDensities(s, lp);
}

[% sig_sparse_static_function('sample') %] {
  BI_ERROR(false, "Cannot sample from uninformative distribution");
}

[% sig_sparse_static_function('logdensity') %] {
  bi::SparseStaticLogDensity<[% model_class_name %],action_typelist>::logDensities(s, mask, lp);
}

[% sig_sparse_static_function('maxlogdensity') %] {
  bi::SparseStaticMaxLogDensity<[% model_class_name %],action_typelist>::maxLogDensities(s, mask, lp);
}

[%-PROCESS block/misc/footer.hpp.tt-%]
