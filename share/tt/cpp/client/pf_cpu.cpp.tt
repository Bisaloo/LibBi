[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/kd/kde.hpp"
#include "bi/random/Random.hpp"
#include "bi/method/Forcer.hpp"
#include "bi/method/Observer.hpp"
#include "bi/method/Simulator.hpp"
#include "bi/method/FilterFactory.hpp"
#include "bi/state/BootstrapPFState.hpp"
#include "bi/state/AuxiliaryPFState.hpp"
#include "bi/cache/BootstrapPFCache.hpp"
#include "bi/cache/AdaptivePFCache.hpp"
#include "bi/stopper/Stopper.hpp"
#include "bi/stopper/SumOfWeightsStopper.hpp"
#include "bi/stopper/MinimumESSStopper.hpp"
#include "bi/stopper/StdDevStopper.hpp"
#include "bi/stopper/VarStopper.hpp"
#include "bi/resampler/MultinomialResampler.hpp"
#include "bi/resampler/MetropolisResampler.hpp"
#include "bi/resampler/RejectionResampler.hpp"
#include "bi/resampler/KernelResampler.hpp"
#include "bi/resampler/StratifiedResampler.hpp"
#include "bi/resampler/SystematicResampler.hpp"
#include "bi/buffer/SparseInputNetCDFBuffer.hpp"
#include "bi/ode/IntegratorConstants.hpp"
#include "bi/misc/TicToc.hpp"
#ifdef ENABLE_MPI
#include "bi/mpi/resampler/DistributedResampler.hpp"
#endif

#include "boost/typeof/typeof.hpp"

#include <iostream>
#include <iomanip>
#include <string>
#include <getopt.h>

#ifdef ENABLE_CUDA
#define LOCATION ON_DEVICE
#else
#define LOCATION ON_HOST
#endif

int main(int argc, char* argv[]) {
  using namespace bi;

  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]
  
  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  boost::mpi::communicator world;
  const int rank = world.rank();
  const int size = world.size();
  NPARTICLES /= size;
  #else
  const int rank = 0;
  const int size = 1;
  #endif
    
  /* bi init */
  bi_init(NTHREADS);

  /* random number generator */
  Random rng(SEED);

  /* model */
  model_type m;
  
  /* state */
  NPARTICLES = bi::roundup(NPARTICLES);
  MAX_PARTICLES = bi::roundup(MAX_PARTICLES);
  BLOCK_PARTICLES = bi::roundup(BLOCK_PARTICLES);
  [% IF client.get_named_arg('filter') == 'lookahead' %]
  AuxiliaryPFState<model_type,LOCATION> s(NPARTICLES);
  [% ELSIF client.get_named_arg('filter') == 'bridge' %]
  AuxiliaryPFState<model_type,LOCATION> s(NPARTICLES);
  [% ELSIF client.get_named_arg('filter') == 'adaptive' %]
  BootstrapPFState<model_type,LOCATION> s(NPARTICLES);
  [% ELSE %]
  BootstrapPFState<model_type,LOCATION> s(NPARTICLES);
  [% END %]

  /* inputs */
  SparseInputNetCDFBuffer *bufInput = NULL, *bufInit = NULL, *bufObs = NULL;
  if (!INPUT_FILE.empty()) {
    bufInput = new SparseInputNetCDFBuffer(m, INPUT_FILE, INPUT_NS, INPUT_NP);
  }
  if (!INIT_FILE.empty()) {
    bufInit = new SparseInputNetCDFBuffer(m, INIT_FILE, INIT_NS, INIT_NP);
  }
  if (!OBS_FILE.empty()) {
    bufObs = new SparseInputNetCDFBuffer(m, OBS_FILE, OBS_NS, OBS_NP);
  }

  /* schedule */
  Schedule sched(m, START_TIME, END_TIME, NOUTPUTS, NBRIDGES, bufInput, bufObs);

  /* output */
  ParticleFilterNetCDFBuffer* bufOutput = NULL;
  if (WITH_OUTPUT && !OUTPUT_FILE.empty()) {
    [% IF client.get_named_arg('filter') == 'adaptive' %]
    bufOutput = new ParticleFilterNetCDFBuffer(m, NPARTICLES, sched.numOutputs(), append_rank(OUTPUT_FILE), NetCDFBuffer::REPLACE, SimulatorNetCDFBuffer::FLEXI);
    [% ELSE %]
    bufOutput = new ParticleFilterNetCDFBuffer(m, NPARTICLES, sched.numOutputs(), append_rank(OUTPUT_FILE), NetCDFBuffer::REPLACE);
    [% END %]
  }

  /* resampler */
  [% IF client.get_named_arg('with-mpi') %]
    [% IF client.get_named_arg('resampler') == 'metropolis' %]
    MetropolisResampler base(C, ESS_REL, BRIDGE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
    RejectionResampler base;
    [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
    MultinomialResampler base(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'systematic' %]
    SystematicResampler base(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% ELSE %]
    StratifiedResampler base(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% END %]
    DistributedResampler<BOOST_TYPEOF(base)> resam(&base, ESS_REL, BRIDGE_ESS_REL);
  [% ELSE %]
    [% IF client.get_named_arg('resampler') == 'kernel' %]
    real h;
    if (B_ABS > 0.0) {
      h = B_ABS;
    } else {
      h = B_REL*hopt(m.getDynSize(), P);
    }
    MultinomialResampler base(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    KernelResampler<BOOST_TYPEOF(base)> resam(&base, h, WITH_SHRINK, ESS_REL, BRIDGE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'metropolis' %]
    MetropolisResampler resam(C, ESS_REL, BRIDGE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
    RejectionResampler resam;
    [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
    MultinomialResampler resam(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'systematic' %]
    SystematicResampler resam(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% ELSE %]
    StratifiedResampler resam(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% END %]
  [% END %]
  
  /* simulator */
  BOOST_AUTO(in, ForcerFactory<LOCATION>::create(bufInput));
  BOOST_AUTO(obs, ObserverFactory<LOCATION>::create(bufObs));
  BOOST_AUTO(sim, SimulatorFactory::create(m, in, obs));
  
  /* filter */
  [% IF client.get_named_arg('filter') == 'adaptive' %]
    BOOST_AUTO(out, AdaptivePFCacheFactory<LOCATION>::create(bufOutput));
  [% ELSE %]
    BOOST_AUTO(out, BootstrapPFCacheFactory<LOCATION>::create(bufOutput));
  [% END %]

  [% IF client.get_named_arg('filter') == 'lookahead' %]
    BOOST_AUTO(filter, (FilterFactory::createLookaheadPF(m, *sim, resam)));
  [% ELSIF client.get_named_arg('filter') == 'bridge' %]
    BOOST_AUTO(filter, (FilterFactory::createBridgePF(m, *sim, resam)));
  [% ELSIF client.get_named_arg('filter') == 'adaptive' %]
    /* stopper */
    [% IF client.get_named_arg('stopper') == 'deterministic' %]
    Stopper stopper(NPARTICLES, MAX_PARTICLES, sched.numObs());
    [% ELSIF client.get_named_arg('stopper') == 'sumofweights' %]
    SumOfWeightsStopper stopper(STOPPER_THRESHOLD, MAX_PARTICLES, sched.numObs());
    [% ELSIF client.get_named_arg('stopper') == 'miness' %]
    MinimumESSStopper stopper(STOPPER_THRESHOLD, MAX_PARTICLES, sched.numObs());
    [% ELSIF client.get_named_arg('stopper') == 'stddev' %]
    StdDevStopper stopper(STOPPER_THRESHOLD, MAX_PARTICLES, sched.numObs());
    [% ELSIF client.get_named_arg('stopper') == 'var' %]
    VarStopper stopper(STOPPER_THRESHOLD, MAX_PARTICLES, sched.numObs());
    [% END %]
    BOOST_AUTO(filter, (AdaptivePFFactory::create(m, sim, &resam, &stopper, out)));
  [% ELSE %]
    BOOST_AUTO(filter, (FilterFactory::createBootstrapPF(m, *sim, resam)));
  [% END %]

  #ifdef ENABLE_GPERFTOOLS
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  #endif
  #ifdef ENABLE_TIMING
  TicToc timer;
  timer.sync();
  timer.tic();
  #endif
  
  filter->filter(rng, sched.begin(), sched.end(), s, out, bufInit);
  
  #ifdef ENABLE_TIMING
  timer.sync();
  /* output timing results */
  if (rank == 0) {
    std::cout << "total " << timer.toc() << " us" << std::endl;
  }
  #endif
  #ifdef ENABLE_GPERFTOOLS
  ProfilerStop();
  #endif

  delete filter;
  delete out;
  delete sim;
  delete obs;
  delete in;
  delete bufOutput;
  delete bufObs;
  delete bufInit;
  delete bufInput;
  
  return 0;
}
