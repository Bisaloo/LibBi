[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev$
## $Date$
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/state/State.hpp"
#include "bi/random/Random.hpp"
#include "bi/method/SMC2.hpp"

#include "bi/method/ParticleMarginalMetropolisHastings.hpp"
[% IF client.get_named_arg('filter') == 'kalman' %]
#include "bi/method/ExtendedKalmanFilter.hpp"
[% ELSE %]
[% IF client.get_named_arg('filter') == 'lookahead' %]
#include "bi/method/AuxiliaryParticleFilter.hpp"
[% ELSIF client.get_named_arg('filter') == 'bridge' %]
#include "bi/method/BridgeParticleFilter.hpp"
[% ELSIF client.get_named_arg('filter') == 'adaptive' %]
#include "bi/method/AdaptiveParticleFilter.hpp"
#include "bi/stopper/Stopper.hpp"
#include "bi/stopper/SumOfWeightsStopper.hpp"
#include "bi/stopper/MinimumESSStopper.hpp"
#include "bi/stopper/StdDevStopper.hpp"
#include "bi/stopper/VarStopper.hpp"
[% ELSE %]
#include "bi/method/ParticleFilter.hpp"
[% END %]
#include "bi/cache/ParticleFilterCache.hpp"
#include "bi/resampler/MultinomialResampler.hpp"
#include "bi/resampler/MetropolisResampler.hpp"
#include "bi/resampler/RejectionResampler.hpp"
#include "bi/resampler/KernelResampler.hpp"
#include "bi/resampler/StratifiedResampler.hpp"
#include "bi/resampler/SystematicResampler.hpp"
[% END %]

#include "bi/method/Simulator.hpp"
#include "bi/method/Forcer.hpp"
#include "bi/method/Observer.hpp"
#include "bi/buffer/SparseInputNetCDFBuffer.hpp"
#include "bi/cache/SMC2Cache.hpp"
#include "bi/ode/IntegratorConstants.hpp"
#include "bi/misc/TicToc.hpp"
#ifdef ENABLE_MPI
#include "bi/mpi/resampler/DistributedResampler.hpp"
#endif

#include "boost/typeof/typeof.hpp"

#include <iostream>
#include <iomanip>
#include <string>
#include <getopt.h>

#ifdef ENABLE_CUDA
#define LOCATION ON_DEVICE
#else
#define LOCATION ON_HOST
#endif

int main(int argc, char* argv[]) {
  using namespace bi;

  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]
  
  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  boost::mpi::communicator world;
  const int rank = world.rank();
  const int size = world.size();
  NSAMPLES /= size;
  #else
  const int rank = 0;
  const int size = 1;
  #endif
  
  /* bi init */
  bi_init(NTHREADS);

  /* random number generator */
  Random rng(SEED);

  /* model */
  model_type m;

  /* inputs */
  SparseInputNetCDFBuffer *bufInput = NULL, *bufInit = NULL, *bufObs = NULL;
  if (!INPUT_FILE.empty()) {
    bufInput = new SparseInputNetCDFBuffer(m, INPUT_FILE, INPUT_NS, INPUT_NP);
  }
  if (!INIT_FILE.empty()) {
    bufInit = new SparseInputNetCDFBuffer(m, INIT_FILE, INIT_NS, INIT_NP);
  }
  if (!OBS_FILE.empty()) {
    bufObs = new SparseInputNetCDFBuffer(m, OBS_FILE, OBS_NS, OBS_NP);
  }

  /* schedule */
  Schedule sched(m, START_TIME, END_TIME, NOUTPUTS, bufInput, bufObs);

  /* state and intermediate results */
  ThetaParticle<model_type,LOCATION> s(NPARTICLES, sched.numOutputs());
  NPARTICLES = s.size(); // may change according to implementation
  NSAMPLES = State<model_type,LOCATION>::roundup(NSAMPLES); // so that number of samples for later prediction is of correct multiple

  /* output */
  SMC2NetCDFBuffer* bufOutput = NULL;
  if (WITH_OUTPUT && !OUTPUT_FILE.empty()) {
      bufOutput = new SMC2NetCDFBuffer(m, NSAMPLES, sched.numOutputs(), append_rank(OUTPUT_FILE), NetCDFBuffer::REPLACE);
  }

  /* simulator */
  BOOST_AUTO(in, bi::ForcerFactory<LOCATION>::create(bufInput));
  BOOST_AUTO(obs, ObserverFactory<LOCATION>::create(bufObs));
  BOOST_AUTO(sim, bi::SimulatorFactory::create(m, in, obs));

  /* filter */ 
  [% IF client.get_named_arg('filter') == 'kalman' %]
    BOOST_AUTO(outFilter, KalmanFilterCacheFactory<LOCATION>::create());
    BOOST_AUTO(filter, (ExtendedKalmanFilterFactory::create(m, sim, outFilter)));
  [% ELSE %]
    BOOST_AUTO(outFilter, ParticleFilterCacheFactory<LOCATION>::create());

    /* resampler */
    [% IF client.get_named_arg('resampler') == 'kernel' %]
    real h;
    if (B_ABS > 0.0) {
      h = B_ABS;
    } else {
      h = B_REL*hopt(m.getDynSize(), NPARTICLES);
    }
    MultinomialResampler base(WITH_SORT, ESS_REL);
    KernelResampler<BOOST_TYPEOF(thetabase)> resam(&base, h, WITH_SHRINK, ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'metropolis' %]
    MetropolisResampler resam(C, ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
    RejectionResampler resam;
    [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
    MultinomialResampler resam(WITH_SORT, ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'systematic' %]
    SystematicResampler resam(WITH_SORT, ESS_REL);
    [% ELSE %]
    StratifiedResampler resam(WITH_SORT, ESS_REL);
    [% END %]
        
    /* particle filter */
    [% IF client.get_named_arg('filter') == 'lookahead' %]
      BOOST_AUTO(filter, (AuxiliaryParticleFilterFactory::create(m, sim, &resam, outFilter)));
    [% ELSIF client.get_named_arg('filter') == 'bridge' %]
      BOOST_AUTO(filter, (BridgeParticleFilterFactory::create(m, sim, &resam, outFilter)));
    [% ELSIF client.get_named_arg('filter') == 'adaptive' %]
      /* stopper */
      [% IF client.get_named_arg('stopper') == 'deterministic' %]
      Stopper stopper(NPARTICLES);
      [% ELSIF client.get_named_arg('stopper') == 'sumofweights' %]
      SumOfWeightsStopper stopper(REL_THRESHOLD, MAX_P);
      [% ELSIF client.get_named_arg('stopper') == 'miness' %]
      MinimumESSStopper stopper(REL_THRESHOLD, MAX_P);
      [% ELSIF client.get_named_arg('stopper') == 'stddev' %]
      StdDevStopper stopper(REL_THRESHOLD, MAX_P);
      [% ELSIF client.get_named_arg('stopper') == 'var' %]
      VarStopper stopper(REL_THRESHOLD, MAX_P);
      [% END %]
      BOOST_AUTO(filter, (AdaptiveParticleFilterFactory::create(m, sim, &resam, &stopper, BLOCK_P, outFilter)));
    [% ELSE %]
      BOOST_AUTO(filter, (ParticleFilterFactory::create(m, sim, &resam, outFilter)));
    [% END %]
  [% END %]
  
  /* theta-particles resampler */
  [% IF client.get_named_arg('with-mpi') %]
    [% IF client.get_named_arg('resampler') == 'metropolis' %]
    MetropolisResampler thetabase(C, SAMPLE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
    RejectionResampler thetabase;
    [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
    MultinomialResampler thetabase(WITH_SORT, SAMPLE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'systematic' %]
    SystematicResampler thetabase(WITH_SORT, SAMPLE_ESS_REL);
    [% ELSE %]
    StratifiedResampler thetabase(WITH_SORT, SAMPLE_ESS_REL);
    [% END %]
    DistributedResampler<BOOST_TYPEOF(thetabase)> thetaresam(&thetabase, SAMPLE_ESS_REL);
  [% ELSE %]
    [% IF client.get_named_arg('resampler') == 'metropolis' %]
    MetropolisResampler thetaresam(C, SAMPLE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
    RejectionResampler thetaresam;
    [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
    MultinomialResampler thetaresam(WITH_SORT, SAMPLE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'systematic' %]
    SystematicResampler thetaresam(WITH_SORT, SAMPLE_ESS_REL);
    [% ELSE %]
    StratifiedResampler thetaresam(WITH_SORT, SAMPLE_ESS_REL);
    [% END %]
  [% END %]
  
  /* adapter */
  SMC2Adapter adapter;
  if (ADAPTER.compare("local") == 0) {
    adapter = LOCAL_ADAPTER;
  } else if (ADAPTER.compare("global") == 0) {
    adapter = GLOBAL_ADAPTER;
  } else {
    adapter = NO_ADAPTER;
  }
     
  /* sampler */
  BOOST_AUTO(out, SMC2CacheFactory<LOCATION>::create(m, bufOutput));
  BOOST_AUTO(pmmh, ParticleMarginalMetropolisHastingsFactory::create(m, filter, out));
  BOOST_AUTO(sampler, SMC2Factory::create(m, pmmh, &thetaresam,
      NMOVES, adapter, ADAPTER_SCALE, ADAPTER_ESS_REL, out));

  /* sample */
  #ifdef ENABLE_GPERFTOOLS
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  #endif
  #ifdef ENABLE_TIMING
  TicToc timer;
  timer.sync();
  timer.tic();
  #endif
  
  sampler->sample(rng, sched.begin(), sched.end(), s, bufInit, NSAMPLES);
  
  #ifdef ENABLE_TIMING
  timer.sync();
  /* output timing results */
  if (rank == 0) {
    std::cout << "total " << timer.toc() << " us" << std::endl;
  }
  #endif
  #ifdef ENABLE_GPERFTOOLS
  ProfilerStop();
  #endif

  delete sampler;
  delete out;
  delete filter;
  delete outFilter;
  delete sim;
  delete obs;
  delete in;
  delete bufOutput;
  delete bufObs;
  delete bufInit;
  delete bufInput;
}
