[%
## @file
##
## @author Edwin van Leeuwen <edwinvanl@gmail.com>
%]

[%-
size = action.get_named_arg('size');
prob = action.get_named_arg('prob');
%]

[%-PROCESS action/misc/header.hpp.tt-%]

/**
 * Action: [% action.get_name %].
 */
class [% class_name %] {
public:
  [% std_action %]

  [% declare_action_static_function('simulate') %]
  [% declare_action_static_function('sample') %]
  [% declare_action_static_function('logdensity') %]
  [% declare_action_static_function('maxlogdensity') %]
};

#include "bi/pdf/functor.hpp"
#include "bi/random/generic.hpp"

[% std_action_static_function('simulate') %]

[% sig_action_static_function('sample') %] {
  [% alias_dims(action) %]
  [% fetch_parents(action) %]
  [% offset_coord(action) %]

  real n = [% size.to_cpp %];
  real pr = [% prob.to_cpp %];
  real u = rng.binomial(n, pr);
  
  [% put_output(action, 'u') %]
}

[% sig_action_static_function('logdensity') %] {
  [% alias_dims(action) %]
  [% fetch_parents(action) %]
  [% offset_coord(action) %]

  real n = [% size.to_cpp %];
  real pr = [% prob.to_cpp %];
  
  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());

  bi::binomial_log_density_functor<T1, T1> f(n, pr);
  lp += f(xy);

  [% put_output(action, 'xy') %]
}

[% sig_action_static_function('maxlogdensity') %] {
  [% alias_dims(action) %]
  [% fetch_parents(action) %]
  [% offset_coord(action) %]

  real n = [% size.to_cpp %];
  real pr = [% prob.to_cpp %];

  real xy = pax.template fetch_alt<target_type>(s, p, cox_.index());
  
  [% IF size.is_common && prob.is_common %]
  bi::binomial_log_density_functor<T1, T1> f(n, pr);
  if (n >= BI_REAL(0.0) && pr >= BI_REAL(0.0) && pr <= BI_REAL(1.0)) {
   	lp += f(bi::floor((n+1)*pr));
  } else {
    lp = BI_INF;
  }
  [% ELSE %]
  lp = BI_INF;
  [% END %]

  [% put_output(action, 'xy') %]
}

[%-PROCESS action/misc/footer.hpp.tt-%]
