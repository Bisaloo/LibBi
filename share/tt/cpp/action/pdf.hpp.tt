[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
## $Rev: 3055 $
## $Date: 2012-09-06 17:39:02 +0800 (Thu, 06 Sep 2012) $
%]

[%-
  pdf = action.get_named_arg('pdf');
  max_pdf = action.get_named_arg('max_pdf');
-%]

[%-PROCESS action/misc/header.hpp.tt-%]

/**
 * Action: [% action.get_name %].
 */
class [% class_name %] {
public:
  [% std_action %]

  [% declare_action_static_function('simulate') %]
  [% declare_action_static_function('sample') %]
  [% declare_action_static_function('logdensity') %]
  [% declare_action_static_function('maxlogdensity') %]
};

[% std_action_static_function('simulate') %]

[% sig_action_static_function('sample') %] {
  BI_WARN_MSG(false, "Cannot sample with pdf action");
}

[% sig_action_static_function('logdensity') %] {
  /* write x <- x' first, as then x = x' for pdf */
  BOOST_AUTO(xy, pax.template fetch_alt<target_type>(s, p, cox.index()));
  x.template fetch<target_type>(s, p, cox.index()) = xy;

  [% alias_dims(action) %]
  [% fetch_parents(pdf) %]
  
  lp += bi::log([% pdf.to_cpp %]);
}

[% sig_action_static_function('maxlogdensity') %] {
  /* write x <- x' first, as then x = x' for pdf */
  BOOST_AUTO(xy, pax.template fetch_alt<target_type>(s, p, cox.index()));
  x.template fetch<target_type>(s, p, cox.index()) = xy;

  [% alias_dims(action) %]
  [% fetch_parents(max_pdf) %]
  
  [% IF max_pdf.is_const && max_pdf.eval_const == 0.0 %]
  lp = BI_REAL(1.0/0.0);
  [% ELSE %]
  lp += bi::log([% max_pdf.to_cpp %]);
  [% END %]
}

[%-PROCESS action/misc/footer.hpp.tt-%]
