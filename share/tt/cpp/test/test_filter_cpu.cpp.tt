[%
## @file
##
## @author Lawrence Murray <lawrence.murray@csiro.au>
%]

[%-PROCESS client/misc/header.cpp.tt-%]
[%-PROCESS macro.hpp.tt-%]

#include "model/[% class_name %].hpp"

#include "bi/kd/kde.hpp"
#include "bi/state/ThetaState.hpp"
#include "bi/random/Random.hpp"
#include "bi/method/ParticleMarginalMetropolisHastings.hpp"

[% IF client.get_named_arg('filter') == 'kalman' %]
#include "bi/method/ExtendedKalmanFilter.hpp"
#include "bi/cache/KalmanFilterCache.hpp"
[% ELSE %]
[% IF client.get_named_arg('filter') == 'lookahead' %]
#include "bi/method/AuxiliaryParticleFilter.hpp"
[% ELSIF client.get_named_arg('filter') == 'bridge' %]
#include "bi/method/BridgeParticleFilter.hpp"
[% ELSIF client.get_named_arg('filter') == 'adaptive' %]
#include "bi/method/AdaptiveParticleFilter.hpp"
#include "bi/cache/AdaptiveParticleFilterCache.hpp"
#include "bi/stopper/Stopper.hpp"
#include "bi/stopper/SumOfWeightsStopper.hpp"
#include "bi/stopper/MinimumESSStopper.hpp"
#include "bi/stopper/StdDevStopper.hpp"
#include "bi/stopper/VarStopper.hpp"
[% ELSE %]
#include "bi/method/ParticleFilter.hpp"
[% END %]
#include "bi/cache/ParticleFilterCache.hpp"
#include "bi/resampler/MultinomialResampler.hpp"
#include "bi/resampler/MetropolisResampler.hpp"
#include "bi/resampler/RejectionResampler.hpp"
#include "bi/resampler/KernelResampler.hpp"
#include "bi/resampler/StratifiedResampler.hpp"
#include "bi/resampler/SystematicResampler.hpp"
[% END %]

#include "bi/method/Simulator.hpp"
#include "bi/method/Forcer.hpp"
#include "bi/method/Observer.hpp"
#include "bi/buffer/SparseInputNetCDFBuffer.hpp"
#include "bi/ode/IntegratorConstants.hpp"
#include "bi/misc/TicToc.hpp"

#include "boost/typeof/typeof.hpp"

#include <iostream>
#include <iomanip>
#include <string>
#include <getopt.h>

#ifdef ENABLE_CUDA
#define LOCATION ON_DEVICE
#else
#define LOCATION ON_HOST
#endif

int main(int argc, char* argv[]) {
  using namespace bi;

  /* model type */
  typedef [% class_name %] model_type;
  
  /* command line arguments */
  [% read_argv(client) %]
  
  /* MPI init */
  #ifdef ENABLE_MPI
  boost::mpi::environment env(argc, argv);
  #endif
  
  /* bi init */
  bi_init(NTHREADS);

  /* random number generator */
  Random rng(SEED);

  /* model */
  model_type m;

  /* inputs */
  SparseInputNetCDFBuffer *bufInput = NULL, *bufInit = NULL, *bufObs = NULL;
  if (!INPUT_FILE.empty()) {
    bufInput = new SparseInputNetCDFBuffer(m, INPUT_FILE, INPUT_NS, INPUT_NP);
  }
  if (!INIT_FILE.empty()) {
    bufInit = new SparseInputNetCDFBuffer(m, INIT_FILE, INIT_NS, INIT_NP);
  }
  if (!OBS_FILE.empty()) {
    bufObs = new SparseInputNetCDFBuffer(m, OBS_FILE, OBS_NS, OBS_NP);
  }
  
  /* schedule */
  Schedule sched(m, START_TIME, END_TIME, NOUTPUTS, NBRIDGES, bufInput, bufObs);

  /* state and intermediate results */
  [% IF client.get_named_arg('filter') == 'kalman' %]
  NPARTICLES = 1;
  [% END %]
  State<model_type,LOCATION> s(NPARTICLES);
  NPARTICLES = s.size(); // may change according to implementation
  
  /* simulator */
  BOOST_AUTO(in, bi::ForcerFactory<LOCATION>::create(bufInput));
  BOOST_AUTO(obs, ObserverFactory<LOCATION>::create(bufObs));
  BOOST_AUTO(sim, bi::SimulatorFactory::create(m, in, obs));

  /* filter */
  [% IF client.get_named_arg('filter') == 'kalman' %]
    BOOST_AUTO(out, bi::KalmanFilterCacheFactory<LOCATION>::create());
    BOOST_AUTO(filter, (ExtendedKalmanFilterFactory::create(m, sim, out)));
  [% ELSE %]
    [% IF client.get_named_arg('filter') == 'adaptive' %]
    BOOST_AUTO(out, AdaptiveParticleFilterCacheFactory<LOCATION>::create());
    [% ELSE %]
    BOOST_AUTO(out, ParticleFilterCacheFactory<LOCATION>::create());
    [% END %]

    /* resampler */
    [% IF client.get_named_arg('resampler') == 'kernel' %]
    real h;
    if (B_ABS > 0.0) {
      h = B_ABS;
    } else {
      h = B_REL*bi::hopt(m.getDynSize(), NPARTICLES);
    }
    MultinomialResampler base(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    KernelResampler<BOOST_TYPEOF(base)> resam(&base, h, WITH_SHRINK, ESS_REL, BRIDGE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'metropolis' %]
    MetropolisResampler resam(C, ESS_REL, BRIDGE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'rejection' %]
    RejectionResampler resam;
    [% ELSIF client.get_named_arg('resampler') == 'multinomial' %]
    MultinomialResampler resam(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% ELSIF client.get_named_arg('resampler') == 'systematic' %]
    SystematicResampler resam(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% ELSE %]
    StratifiedResampler resam(WITH_SORT, ESS_REL, BRIDGE_ESS_REL);
    [% END %]
        
    /* particle filter */
    [% IF client.get_named_arg('filter') == 'lookahead' %]
      BOOST_AUTO(filter, (AuxiliaryParticleFilterFactory::create(m, sim, &resam, out)));
    [% ELSIF client.get_named_arg('filter') == 'bridge' %]
      BOOST_AUTO(filter, (BridgeParticleFilterFactory::create(m, sim, &resam, out)));
    [% ELSIF client.get_named_arg('filter') == 'adaptive' %]
      /* stopper */
      [% IF client.get_named_arg('stopper') == 'deterministic' %]
      Stopper stopper(NPARTICLES, MAX_PARTICLES, BLOCK_PARTICLES, sched.numObs());
      [% ELSIF client.get_named_arg('stopper') == 'sumofweights' %]
      SumOfWeightsStopper stopper(STOPPER_THRESHOLD, MAX_PARTICLES, BLOCK_PARTICLES, sched.numObs());
      [% ELSIF client.get_named_arg('stopper') == 'miness' %]
      MinimumESSStopper stopper(STOPPER_THRESHOLD, MAX_PARTICLES, BLOCK_PARTICLES, sched.numObs());
      [% ELSIF client.get_named_arg('stopper') == 'stddev' %]
      StdDevStopper stopper(STOPPER_THRESHOLD, MAX_PARTICLES, BLOCK_PARTICLES, sched.numObs());
      [% ELSIF client.get_named_arg('stopper') == 'var' %]
      VarStopper stopper(STOPPER_THRESHOLD, MAX_PARTICLES, BLOCK_PARTICLES, sched.numObs());
      [% END %]
      BOOST_AUTO(filter, (AdaptiveParticleFilterFactory::create(m, sim, &resam, &stopper, out)));
    [% ELSE %]
      BOOST_AUTO(filter, (ParticleFilterFactory::create(m, sim, &resam, out)));
    [% END %]
  [% END %]

  /* test */
  #ifdef ENABLE_GPERFTOOLS
  ProfilerStart(GPERFTOOLS_FILE.c_str());
  #endif
  #ifdef ENABLE_TIMING
  TicToc timer;
  #endif

  host_matrix<real> lls(REPS, PS);
  host_matrix<long> times(REPS, PS);
  host_vector<int> Ps(PS);
  int p, P, k;
  real ll;
  long t;
  
  for (p = 0; p < PS; ++p) {
    P = NPARTICLES*std::pow(2, p);
    Ps(p) = P;
    s.resize(P, false);
    
    for (k = 0; k < REPS; ++k) {
      try {
        #ifdef ENABLE_TIMING
        synchronize();
        timer.tic();
        #endif
        ll = filter->filter(rng, sched.begin(), sched.end(), s, bufInit);
        #ifdef ENABLE_TIMING
        synchronize();
        t = timer.toc();
        #endif
        lls(k,p) = ll;
        times(k,p) = t;
      } catch (ParticleFilterDegeneratedException e) {
        lls(k,p) = -1.0/0.0;
        times(k,p) = -1;
      }
    }
  }

  #ifdef ENABLE_GPERFTOOLS
  ProfilerStop();
  #endif
 
  /* output */
  int ncid = bi::nc_create(OUTPUT_FILE, NC_NETCDF4);

  int PDim = bi::nc_def_dim(ncid, "P", PS);
  int repDim = bi::nc_def_dim(ncid, "rep", REPS);

  std::vector<int> dimids2(2);
  dimids2[0] = PDim;
  dimids2[1] = repDim;

  int timeVar = bi::nc_def_var(ncid, "time", NC_LONG, dimids2);
  int llVar = bi::nc_def_var(ncid, "loglikelihood", NC_REAL, dimids2);
  int PVar = bi::nc_def_var(ncid, "P", NC_INT, PDim);
      
  bi::nc_put_var(ncid, timeVar, times.buf());
  bi::nc_put_var(ncid, llVar, lls.buf());
  bi::nc_put_var(ncid, PVar, Ps.buf());
  
  bi::nc_close(ncid);
 
  delete filter;
  delete out;
  delete sim;
  delete obs;
  delete in;
  delete bufObs;
  delete bufInit;
  delete bufInput;
}
